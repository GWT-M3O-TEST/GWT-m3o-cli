{
  "components": {
    "requestBodies": {
      "EmailParseRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ParseRequest"
            }
          }
        },
        "description": "EmailParseRequest"
      },
      "EmailSendRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SendRequest"
            }
          }
        },
        "description": "EmailSendRequest"
      },
      "EmailValidateRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ValidateRequest"
            }
          }
        },
        "description": "EmailValidateRequest"
      }
    },
    "responses": {
      "EmailParseResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ParseResponse"
            }
          }
        },
        "description": "EmailParseResponse"
      },
      "EmailSendResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SendResponse"
            }
          }
        },
        "description": "EmailSendResponse"
      },
      "EmailValidateResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ValidateResponse"
            }
          }
        },
        "description": "EmailValidateResponse"
      },
      "MicroAPIError": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "Code": {
                  "description": "Error code",
                  "example": 500,
                  "type": "number"
                },
                "Detail": {
                  "description": "Error detail",
                  "example": "service not found",
                  "type": "string"
                },
                "Id": {
                  "description": "Error ID",
                  "type": "string"
                },
                "Status": {
                  "description": "Error status message",
                  "example": "Internal Server Error",
                  "type": "string"
                }
              },
              "title": "MicroAPIError",
              "type": "object"
            }
          }
        },
        "description": "Error from the Micro API"
      }
    },
    "schemas": {
      "ParseRequest": {
        "description": "Parse an RFC5322 address e.g \"Joe Blogs \u003cjoe@example.com\u003e\"",
        "properties": {
          "address": {
            "description": "The address to parse. Can be of the format \"Joe Blogs \u003cjoe@example.com\u003e\" or \"joe@example.com\"",
            "type": "string"
          }
        },
        "title": "ParseRequest",
        "type": "object"
      },
      "ParseResponse": {
        "properties": {
          "address": {
            "description": "the email address",
            "type": "string"
          },
          "name": {
            "description": "associated name e.g Joe Blogs",
            "type": "string"
          }
        },
        "title": "ParseResponse",
        "type": "object"
      },
      "SendRequest": {
        "description": "Send an email by passing in from, to, subject, and a text or html body",
        "properties": {
          "from": {
            "description": "the display name of the sender",
            "type": "string"
          },
          "html_body": {
            "description": "the html body",
            "type": "string"
          },
          "reply_to": {
            "description": "an optional reply to email address",
            "type": "string"
          },
          "subject": {
            "description": "the email subject",
            "type": "string"
          },
          "text_body": {
            "description": "the text body",
            "type": "string"
          },
          "to": {
            "description": "the email address of the recipient",
            "type": "string"
          }
        },
        "title": "SendRequest",
        "type": "object"
      },
      "SendResponse": {
        "title": "SendResponse",
        "type": "object"
      },
      "ValidateRequest": {
        "description": "Validate an email address format",
        "properties": {
          "address": {
            "type": "string"
          }
        },
        "title": "ValidateRequest",
        "type": "object"
      },
      "ValidateResponse": {
        "properties": {
          "is_valid": {
            "type": "boolean"
          }
        },
        "title": "ValidateResponse",
        "type": "object"
      }
    },
    "securitySchemes": {
      "M3OAPIToken": {
        "bearerFormat": "token",
        "description": "M3O API token",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "description": "Generated by protoc-gen-openapi",
    "title": "Email",
    "version": "1",
    "x-logo": {
      "altText": "M3O logo",
      "backgroundColor": "#000000",
      "url": "https://raw.githubusercontent.com/m3o/m3o/main/images/logo.png"
    }
  },
  "openapi": "3.0.0",
  "paths": {
    "/email/Email/Parse": {
      "parameters": [
        {
          "in": "header",
          "name": "Micro-Namespace",
          "required": true,
          "schema": {
            "default": "micro",
            "type": "string"
          }
        }
      ],
      "post": {
        "requestBody": {
          "$ref": "#/components/requestBodies/EmailParseRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmailParseResponse"
          },
          "default": {
            "$ref": "#/components/responses/MicroAPIError"
          }
        },
        "security": [
          {
            "MicroAPIToken": []
          }
        ],
        "summary": "Email.Parse(ParseRequest)"
      }
    },
    "/email/Email/Send": {
      "parameters": [
        {
          "in": "header",
          "name": "Micro-Namespace",
          "required": true,
          "schema": {
            "default": "micro",
            "type": "string"
          }
        }
      ],
      "post": {
        "requestBody": {
          "$ref": "#/components/requestBodies/EmailSendRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmailSendResponse"
          },
          "default": {
            "$ref": "#/components/responses/MicroAPIError"
          }
        },
        "security": [
          {
            "MicroAPIToken": []
          }
        ],
        "summary": "Email.Send(SendRequest)"
      }
    },
    "/email/Email/Validate": {
      "parameters": [
        {
          "in": "header",
          "name": "Micro-Namespace",
          "required": true,
          "schema": {
            "default": "micro",
            "type": "string"
          }
        }
      ],
      "post": {
        "requestBody": {
          "$ref": "#/components/requestBodies/EmailValidateRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmailValidateResponse"
          },
          "default": {
            "$ref": "#/components/responses/MicroAPIError"
          }
        },
        "security": [
          {
            "MicroAPIToken": []
          }
        ],
        "summary": "Email.Validate(ValidateRequest)"
      }
    }
  },
  "servers": [
    {
      "url": "https://api.m3o.com/v1",
      "description": "M3O platform"
    }
  ]
}